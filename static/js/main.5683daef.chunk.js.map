{"version":3,"sources":["globals.js","themes.js","pages/styled.js","components/CardButton/styled.js","components/CardButton/index.js","config/endpoints.js","services/apiGithubUsers.js","config/const.js","pages/Home.js","components/CardInfo/styled.js","components/CardInfo/index.js","pages/Info.js","App.js","serviceWorker.js","index.js"],"names":["global","SC_DISABLE_SPEEDY","colors","white","black","red","grey","brown","blue","torre","header","headerText","headerActive","backgroundBody","backgroundButton","backgroundButtonHover","themes","light","primaryColor","secundaryColor","buttonColor","hoverColor","activeLinkColor","activeDynamicPageColor","torreColor","headerBackground","Container","styled","div","ContainerInfo","Link","props","theme","CardButton","login","to","className","get","fetchParams","method","data","body","JSON","stringify","newApiHeaders","Headers","append","headers","credentials","apiGithubUsers","getUsers","a","fetch","endpoints","response","ok","status","json","error","message","statusText","getUserByUsername","username","Home","useState","setData","loading","setLoading","load","useCallback","GithubUsersServices","users","Array","isArray","useEffect","length","map","user","key","id","style","justifyContent","width","color","highlightColor","height","CardInfo","avatar_url","name","location","src","alt","Info","match","params","defaultProps","withRouter","GlobalStyle","createGlobalStyle","themeContext","toogleTheme","App","React","createContext","fontSize","textDecoration","path","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5683daef.chunk.js","sourcesContent":["global.SC_DISABLE_SPEEDY = true\r\n","const colors = {\r\n  white: '#fff',\r\n  black: '#000',\r\n  red: '#b71c1c',\r\n  grey: '#424242',\r\n  brown: '#4e342e',\r\n  blue: '#0d47a1',\r\n  torre: '#F3F3F3',\r\n  header: '#27292D',\r\n  headerText: 'rgba(255, 255, 255, 0.65)',\r\n  headerActive: '#CDDC39',\r\n  backgroundBody: '#f5f6f7',\r\n  backgroundButton: '#1e88e5',\r\n  backgroundButtonHover: '#1565c0',\r\n};\r\n\r\nconst themes = {\r\n  light: {\r\n    colors,\r\n    primaryColor: colors.black,\r\n    secundaryColor: colors.white,\r\n    buttonColor: colors.blue,\r\n    hoverColor: colors.grey,\r\n    activeLinkColor: colors.red,\r\n    activeDynamicPageColor: colors.brown,\r\n    torreColor: colors.torre,\r\n    headerBackground: colors.header,\r\n    headerText: colors.headerText,\r\n    headerActive: colors.headerActive,\r\n    backgroundBody: colors.backgroundBody,\r\n    backgroundButton: colors.backgroundButton,\r\n    backgroundButtonHover: colors.backgroundButtonHover,\r\n  },\r\n};\r\n\r\nexport default themes;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(12rem, 1fr));\r\n  grid-gap: 1.5rem;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ContainerInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-gap: 1.5rem;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: max-content;\r\n`;\r\n\r\n\r\nexport default Container;\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const Container = styled(Link)`\r\n  width: 12rem auto;\r\n  background: #fff;\r\n  background-color: ${props => props.theme.backgroundButton} !important;\r\n  color: #e4c439;\r\n  padding: 1rem;\r\n  border-radius: 10px;\r\n  border-top: 0.5px solid #ce8e7b;\r\n  border-bottom: 0.5px solid #ce8e7b;\r\n  text-align: center;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  position: relative;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  transition: 0.2s ease-in-out all;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    background-color: ${props => props.theme.backgroundButtonHover} !important;\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  .Card--name {\r\n    text-transform: capitalize;\r\n    color: #444;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n/* Style Components */\r\nimport { Container } from './styled';\r\n\r\nconst CardButton = ({login}) => {\r\n  return (\r\n    <Container to={`/users/${login}`}>\r\n      <h1 className=\"Card--name\">{login}</h1>\r\n    </Container>\r\n  )\r\n}\r\n\r\nCardButton.propTypes = {\r\n  login: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardButton;\r\n","export default {\r\n  users: {\r\n    get: '/users',\r\n  },\r\n};\r\n","import { API_HOST } from '../config/const';\r\n/* Defined Endpoints */\r\nimport endpoints from '../config/endpoints';\r\n\r\nconst apiHeaders = {\r\n  'Content-Type': 'application/json',\r\n  Accept: 'application/json',\r\n};\r\n\r\nconst fetchParams = (method, data = '') => {\r\n  const body = data ? { body: JSON.stringify(data) } : {};\r\n\r\n  const newApiHeaders = new Headers();\r\n  newApiHeaders.append(\"Content-Type\", \"application/json\");\r\n  newApiHeaders.append(\"Accept\", \"application/json\");\r\n  return {\r\n    method,\r\n    headers: newApiHeaders,\r\n    credentials: 'same-origin',\r\n    ...body,\r\n  };\r\n};\r\n\r\nexport const apiGithubUsers = {\r\n  getUsers: async () => {\r\n    try {\r\n      const response = await fetch(`${API_HOST}${endpoints.users.get}`, fetchParams('GET'));\r\n      if (!response.ok || response.status === 404 || response.status === 403 || response.status === 409 || response.status === 500 ) {\r\n        const data = await response.json();\r\n        if (typeof data.error !== 'undefined') {\r\n          return data.error;\r\n        }\r\n        if (typeof data.message !== 'undefined') {\r\n          return data.message;\r\n        }\r\n        return response.statusText;\r\n      }\r\n      const data = await response.json();\r\n      if (typeof data.error !== 'undefined') {\r\n        return data.error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  },\r\n  getUserByUsername: async (username) => {\r\n    try {\r\n      const response = await fetch(`${API_HOST}${endpoints.users.get}/${username}`, fetchParams('GET'));\r\n      if (!response.ok || response.status === 403 || response.status === 404 || response.status === 409 || response.status === 500 ) {\r\n        const data = await response.json();\r\n        if (typeof data.error !== 'undefined') {\r\n          return data.error;\r\n        }\r\n        if (typeof data.message !== 'undefined') {\r\n          return data.message;\r\n        }\r\n        return response.statusText;\r\n      }\r\n      const data = await response.json();\r\n      if (typeof data.error !== 'undefined') {\r\n        return data.error;\r\n      }\r\n      return data;\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiGithubUsers;\r\n","export const API_HOST = 'https://api.github.com';\r\nexport const BASE_FONT_SIZE = 14;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\n/* Style Components */\r\nimport { Container } from './styled';\r\n/* Components */\r\nimport CardButton from '../components/CardButton';\r\n/* Services */\r\nimport * as GithubUsersServices from '../services';\r\n\r\nconst Home = () => {\r\n  const [ data, setData ] = useState([]);\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const load = useCallback(async () => {\r\n    const users = await GithubUsersServices.apiGithubUsers.getUsers();\r\n    if (Array.isArray(users)) {\r\n      setData(users);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(data.length === 0 && !loading) {\r\n      load();\r\n      setLoading(true);\r\n    }\r\n  }, [data, load, loading]);\r\n\r\n  return (\r\n    <Container>\r\n      {!loading ? (\r\n        <div style={{justifyContent: 'flex-end', width: '100%'}}>\r\n          Loading information wait moment please...\r\n          <SkeletonTheme color=\"#f42f6391\" highlightColor=\"#444\">\r\n            <Skeleton height={34} />\r\n          </SkeletonTheme>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {data.map((user) => <CardButton key={user.id} {...user} /> )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  .Card--info {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: flex-start;\r\n    border-bottom: 1px solid #ccc;\r\n  }\r\n\r\n  .Card--name {\r\n    text-transform: capitalize;\r\n    color: #444;\r\n    font-size: 2rem;\r\n    font-weight: 700;\r\n  }\r\n\r\n  .Card--image {\r\n    height: 52px;\r\n    width: 52px;\r\n    display: block;\r\n    margin: auto;\r\n    margin-right: 10px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  img {\r\n    border-style: none;\r\n  }\r\n\r\n  .Card--details {\r\n    font-size: 1.3rem;\r\n    color: #db8e80;\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n/* Style Components */\r\nimport { Container } from './styled';\r\n\r\nconst CardInfo = ({ avatar_url, login, name, location}) => {\r\n\r\n  return (\r\n    <Container>\r\n      <img\r\n        className=\"Card--image\"\r\n        src={avatar_url}\r\n        alt={login}\r\n      />\r\n      <div className=\"Card--info\">\r\n        <h1 className=\"Card--name\">{name}</h1>\r\n        <span className=\"Card--details\">{location}</span>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nCardInfo.propTypes = {\r\n  avatar_url: PropTypes.string.isRequired,\r\n  login: PropTypes.bool.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardInfo;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton';\r\n/* Style Components */\r\nimport { ContainerInfo } from './styled';\r\n/* Components */\r\nimport CardInfo from '../components/CardInfo';\r\n/* Services */\r\nimport * as GithubUsersServices from '../services';\r\n\r\nconst Info = ({ match }) => {\r\n  const [ data, setData ] = useState(null);\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const load = useCallback(async () => {\r\n    if(typeof match.params.login !== 'undefined') {\r\n      const user = await GithubUsersServices.apiGithubUsers.getUserByUsername(match.params.login);\r\n      if (typeof data === 'object') {\r\n        setData(user);\r\n      }\r\n    }\r\n  }, [data, match.params.login]);\r\n\r\n  useEffect(() => {\r\n    if(!loading) {\r\n      load();\r\n      setLoading(true);\r\n    }\r\n  }, [load, loading]);\r\n\r\n  return (\r\n    <ContainerInfo>\r\n      {!loading ? (\r\n        <div style={{justifyContent: 'flex-end', width: '100%'}}>\r\n          Loading information wait moment please...\r\n          <SkeletonTheme color=\"#f42f6391\" highlightColor=\"#444\">\r\n            <Skeleton height={34} />\r\n          </SkeletonTheme>\r\n        </div>\r\n      ) : (data &&\r\n        <CardInfo {...data} />\r\n      )}\r\n    </ContainerInfo>\r\n  )\r\n};\r\n\r\nInfo.propTypes = {\r\n  match: PropTypes.oneOfType([PropTypes.object]),\r\n};\r\n\r\nInfo.defaultProps = {\r\n  match: {},\r\n};\r\n\r\nexport default withRouter(Info);\r\n","/* eslint-disable import/no-cycle */\nimport React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { BASE_FONT_SIZE } from './config/const';\nimport themes from './themes';\n/* Pages */\nimport Home from './pages/Home';\nimport Info from './pages/Info';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Caveat:wght@400;700&display=swap');\n  @import url(\"https://fonts.googleapis.com/icon?family=Material+Icons\");\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #f5f6f7 !important;\n    line-height: 1.5;\n    font-family: \"Caveat\", cursive;\n  }\n\n  .App {\n    text-align: center;\n    margin: 2rem 0;\n    padding: 1rem;\n    width: 100%;\n    max-width: 1100px;\n    margin: auto;\n  }\n\n  main > h1 {\n    text-align: center;\n    color: #c0776a;\n    margin-bottom: 2rem;\n    font-size: 2rem;\n    text-transform: uppercase;\n  }\n`;\n\nconst themeContext = {\n  theme: themes.light,\n  toogleTheme: () => {}\n};\n\nexport const ThemeContext = React.createContext(themeContext);\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={themeContext.theme}>\n      <GlobalStyle fontSize={BASE_FONT_SIZE} />\n      <BrowserRouter>\n        <main className=\"App\">\n          <Link to=\"/\" style={{ textDecoration: 'none' }}><h1>GitHub Users</h1></Link>\n          <Switch>\n            <Route path=\"/\" component={Home} />\n            <Route exact path=\"/users/:login\" component={Info} />\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './globals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}